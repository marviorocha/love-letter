{"version":3,"sources":["components/Footer.js","components/Latter.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Latter","props","useState","recipient","setRecipient","sender","setSender","email","setEmail","latter","setLatter","generator","event","from","Algorithmia","client","algo","pipe","then","response","get","useEffect","card","clearInterval","className","action","onChange","e","target","value","name","type","placeholder","src","alt","method","required","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oRAceA,MAZf,WAEI,OAEE,gCACA,qHC8ESC,EA/EA,SAACC,GAAU,IAAD,EAEeC,mBAAS,IAFxB,mBAEZC,EAFY,KAEDC,EAFC,OAGSF,mBAAS,IAHlB,mBAGZG,EAHY,KAGJC,EAHI,OAIOJ,mBAAS,IAJhB,mBAIZK,EAJY,KAILC,EAJK,OAKSN,mBAAS,OALlB,mBAKZO,EALY,KAKJC,EALI,KAcbC,EAAY,SAACC,GAEjB,IAAMC,EAAO,CAACV,EAAWE,GAEzBS,IAAYC,OAAO,gCACVC,KAAK,4EACLC,KAAKJ,GACLK,MAAK,SAASC,GACfT,EAAUS,EAASC,WAgB3B,OARAC,qBAAU,WACT,IAAMC,EAAOX,EACb,OAAO,kBAAMY,cAAcD,MAE5B,CAACb,IAMD,iCAAM,+CACN,yBAAKe,UAAU,YACd,yBAAKA,UAAU,UAEd,0BAAMC,OAAO,GAAGD,UAAU,gBACtB,uBAAGA,UAAU,QAAb,QACA,2BAAOE,SAAU,SAAAC,GAAC,OAAIvB,EAAauB,EAAEC,OAAOC,QAAQL,UAAU,OAAOM,KAAK,YAAYD,MAAO1B,EAAW4B,KAAK,OAAOC,YAAY,sBAFpI,IAE0J,gCAAQ,6BAEpK,uBAAGR,UAAU,QAAQf,EAArB,KAEM,6BACA,8CAAmB,6BAAUJ,EAA7B,KAAyC,6BAC3C,2BAAOqB,SAAU,SAAAC,GAAC,OAAIrB,EAAUqB,EAAEC,OAAOC,QAAQL,UAAU,OAAOO,KAAK,OAAOF,MAAOxB,EAAQyB,KAAK,SAASE,YAAY,gBAK1H,yBAAMR,UAAU,WACjB,yBAAKS,IAAI,uEAAuEC,IAAI,KAAKV,UAAU,eAEnG,0BAAMC,OAAO,IAAIU,OAAO,OAAOX,UAAU,gBACzC,2BAAOE,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOC,QAAQC,KAAK,QAAQD,MAAOtB,EAAOwB,KAAK,QAAQK,UAAQ,EAACJ,YAAY,wBAG7G,2BAAIzB,EAAJ,IAAW,6BAET,4BAAQ8B,QAAS1B,GAAjB,uBAMF,kBAAC,EAAD,QC/DO2B,EAXH,WAGV,OAEI,kBAAC,EAAD,OCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.737d701a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Footer(){\n\n    return(\n\n      <footer>\n      <p> Love Latter Gen is a I.A Generator developing by Marvio Rocha - www.marviorocha.com</p>\n      </footer>\n     )\n\n\n}\n\nexport default Footer","import React, {useState, useEffect} from 'react';\nimport Algorithmia from 'algorithmia';\nimport Footer from './Footer.js'\n\n\n\nconst Latter = (props) =>{\n\n      const [recipient, setRecipient] = useState(\"\");\n      const [sender, setSender] = useState(\"\");\n      const [email, setEmail] = useState(\"\");\n      const [latter, setLatter] = useState(\"...\");\n\n\n\n      const handle = (event) => {\n\n\n      }\n\n      const generator = (event) => {\n\n        const from = [recipient, sender]\n\n        Algorithmia.client(\"sim+YMGX9ZZYp62nds7WsTe3WPd1\")\n                .algo(\"../../../../v1/web/algo/ngram/GenerateRandomLoveLetter/0.1.0?timeout=300\") // timeout is optional\n                .pipe(from)\n                .then(function(response) {\n                setLatter(response.get());\n                });\n\n        \n\n        }\n\n\n        useEffect(() => {\n         const card = generator\n         return () => clearInterval(card)\n        },\n        [latter])\n\n\n\n        return (\n\n        <div> <h1>Love Latter Gen</h1>\n        <div className=\"postcard\">\n         <div className=\"letter\">\n\n          <form action=\"\" className=\"message_form\">\n              <p className=\"push\">Dear</p>\n              <input onChange={e => setRecipient(e.target.value)} className=\"push\" name=\"recipient\" value={recipient} type=\"text\" placeholder=\"name of recipient\"/> <p>,</p><br></br>\n\n        <p className=\"push\">{latter} </p>\n\n              <br></br>\n              <p>Yours Lovingly, <br></br>{sender} </p><br></br>\n            <input onChange={e => setSender(e.target.value)} className=\"push\" type=\"text\" value={sender} name=\"sender\" placeholder=\"your name\" />\n          </form>\n\n         </div>\n\n         <div  className=\"address\">\n        <img src=\"http://i44.photobucket.com/albums/f9/dandee114/stamp_zpsvbuxiwih.png\" alt=\"My\" className=\"mail_stamp\" />\n\n        <form action=\"#\" method=\"post\" className=\"message_form\">\n        <input onChange={e => setEmail(e.target.value)} name=\"email\" value={email} type=\"email\" required placeholder=\"recipient's e-mail\" />\n        </form>\n\n        <p>{email},<br></br>\n\n          <button onClick={generator}>Generator Letter</button>\n        </p>\n\n      </div>\n\n        </div>\n        <Footer />\n       </div>\n        )\n\n\n}\n\nexport default Latter;","import React from 'react';\nimport './styles/index.css';\nimport Latter from './components/Latter'\n\nconst App = () => {\n\n\n  return (\n\n      <Latter></Latter>\n\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}